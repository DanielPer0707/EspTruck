#include <WiFi.h>
#include <HTTPClient.h>

const char* ssid = "ssid";
const char* password = "password";

//Endereço IP ou caminho URL para pedidos HTTP
const char* serverNameHumi = "http://192.168.4.1/humidity";
const char* serverNameTemp = "http://192.168.4.1/temperature";

String temperature;
String humidity;

unsigned long previousMillis = 0;
const long interval = 5000; 

void setup() {
  Serial.begin(115200); // definicao de baud rate

  // conexao a rede wifi do esp32 servidor
  WiFi.begin(ssid, password);
  Serial.println("Connecting");
  while(WiFi.status() != WL_CONNECTED) { 
    delay(500);
    Serial.print(".");
  }
  Serial.println("");
  Serial.print("Connected to WiFi network with IP Address: ");
  Serial.println(WiFi.localIP());
}

void loop() { 
 unsigned long currentMillis = millis();
  
  if(currentMillis - previousMillis >= interval) {
     // Faz uma analise da conexao continua
    if(WiFi.status()== WL_CONNECTED ){ 
    // aqui fazemos os pedidos de informacao HTTP Request  
      temperature = httpGETRequest(serverNameTemp);
      humidity = httpGETRequest(serverNameHumi);
      
      Serial.print("Temperatura (ºC): ");
      Serial.println(temperature);
      Serial.print("Humidade (%): ");
      Serial.println(humidity);
      
      previousMillis = currentMillis;
    }
    else {
      Serial.println("WiFi Disconnected");
    }
  }
}

// funcao GET Request
String httpGETRequest(const char* serverName) {
  WiFiClient client;
  HTTPClient http;
    
  // Nome do dominio com caminho URL ou Endereço IP
 http.begin(client, serverName);
  
  // Enviar HTTP POST request
  int httpResponseCode = http.GET();
  
  String payload = "--"; 
  
  if (httpResponseCode>0) {
    Serial.print("HTTP Response code: ");
    Serial.println(httpResponseCode);
    payload = http.getString();
  }
  else {
    Serial.print("Error code: ");
    Serial.println(httpResponseCode);
  }
  http.end();

  return payload;
}
